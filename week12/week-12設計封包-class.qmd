---
title: "week 12"
format: html
editor: visual
---

## Design Your Own Style

-   As a Package

Keep in mind:

-   theme(...) are stackable.

        ggObject +
          theme(...) +
          theme(...)
        # if there is an overlap setting, say axis.text.x, then the later one override the preceeding one.

```{r}
plt$theme1 =  theme(
   axis.title.x =....
 )

plt$theme2 = theme(
  panel.grid = 
)

plt$make
```

is equivalent to

```{r}
plt$theme= theme(
  axis.title.x =..., panel.grid=...
)
```

-   scale\_...(...) are not stackable, can only be called once in a graph.

```{r}
+scale_x_(...)
+scale_x_(xxxx)
# is equivalent to 
+scale_x_(xxxx)
```

### Start a package project

**New Project** \> **New Directory** \> **R Package**

-   Check **Create git repository**. Later you need to upload to Github.com for others to install -- in you like.

-   Under **Build** tab, **More** \> **Configure Build Tools**, check **Generate documentation with Roxygen**.

### Modualization

How to design your package depends on how you would like to use it in the future. Image package martinStyle is already done and installed. I probably would use it this way:

```{r g}
g <- ggplot(mpg, aes(class)) + geom_bar()
g
```

    #| eval: FALSE
    gg |>
      martinStyle::apply()

#### theme and scale

Style is mostly about theme and scale.

```{r}
# initiate a style container
style = list()

# theme feature
style$theme = theme(
  axis.ticks = element_blank(),
  axis.line.y= element_blank(),
  axis.title.y = element_text(angle=0),
  panel.grid.major.y = element_line(color="grey")
)
```

```{r}
# scale feature
style$scale_y_continuous = scale_y_continuous(
  expand = c(0,0)
)
```

#### To apply

```{r}
g+style$theme+style$scale_y_continuous

```

#### example method

```{r}
style$example = function(){
  library(patchwork)
  gBefore = ggplot(mpg, aes(class)) + geom_bar() + labs(title = "before")
  gAfter = gBefore + style$theme+style$scale_y_continuous+labs(title = "after")
  gBefore + gAfter
}
```

```{r}
style$example()
```

#### Modualize

However, in a package objects imported is a function. We should define another function as a wrapper around `style` called the constructor (of `style`). Normally a constructor is named in the same way as `style` but with first letter in capital:

```{r}
#| eval: FALSE
Style <- function() {
  library(ggplot2)
  # a container
  style <- list()
  # theme
  style$theme <- theme(
    axis.ticks = element_blank(),
    axis.line.y = element_blank(),
    axis.title.y = element_text(angle = 0),
    panel.grid.major.y = element_line(color = "grey")
  )
  # scale
  style$scale_y_continuous <- scale_y_continuous(
    expand = c(0, 0)
  )
  # example
  style$example = function(){
    library(patchwork)
    gBefore = ggplot(mpg, aes(class)) + geom_bar() + labs(title = "before")
    gAfter = gBefore + style$theme+style$scale_y_continuous+labs(title = "after")
    gBefore + gAfter
  }

  return(style)
}
```

The way of using it:

```{r}
style= Style()
# preliminary plot
g <- ggplot(mpg, aes(class)) +
      geom_bar()
g
style$example()
g + style$theme +style$scale_y_continuous
g + theme(...) + scale(....)
```

#### Consistency

When we apply theme or scale, we use `+ theme(...) + scale_..(...)`. Therefore, to be consistent. Our style better follows `+style$theme(...)+style$scale_...(...)`. Both theme and scale should be a function:

```{r}
Style <- function() {
  library(ggplot2)
  # a container
  style <- list()
  # theme
  style$theme <- function(){ theme(
    axis.ticks = element_blank(),
    axis.line.y = element_blank(),
    axis.title.y = element_text(angle = 0),
    panel.grid.major.y = element_line(color = "grey")
  ) }
  # scale
  style$scale_y_continuous <- function(){ scale_y_continuous(
    expand = c(0, 0)
  )}
  # example
  style$example = function(){
    library(patchwork)
    gBefore = ggplot(mpg, aes(class)) + geom_bar() + labs(title = "before")
    gAfter = gBefore + style$theme()+style$scale_y_continuous()+labs(title = "after")
    gBefore + gAfter
  }

  return(style)
}
```

```{r}
library(martinStyle2)
style= Style()
style$example()
# preliminary plot
g <- ggplot(mpg, aes(class)) +
      geom_bar()
g
g + style$theme() +style$scale_y_continuous()
```

#### Build package

Now save `Style` constructor definition

-   in a `.R` file under your package project's `/R` folder.

-   `usethis::use_package("patchwork")` to specify your package needs **patchwork** package to fully work.

-   Click anywhere in your Style function, then **Code** \> **Insert Roxygen Skeleton** to setup your function help syntax.

-   Under **Build** tab, click **More** \> **Document** to render help documents.

> If it shows: Warning message: Skipping NAMESPACE ✖ It already exists and was not generated by roxygen2.

Delete NAMESPACE file, and run **Document** step again.

### Upload to Github.com

In Github Desktop, **File** \> **Add Local Repository**

**Commit** \> **Publish Repository**

### Installation

-   **Build** \> **Install**

If you upload to your github.com, you can do

```{r}
# You need to set this repo public
remotes::install_github("yourUsername/packageName")

```

```{r}
remotes::install_github("tpemartin/martinStyle2")
```

## Scale problem

The problem is that sometimes you want to adjust `scale_y_continuous()` further. In this case,

```{r}
library(martinStyle2)
style=Style()
g <- ggplot(mpg, aes(class)) + geom_bar()
g2 <- g + style$theme()+style$scale_y_continuous()
g2
g2 + scale_y_continuous(name="計次") # the touch down style is gone

style2 = Style2()
g2 = g + style2$theme() + style2$scale_y_continuous(name="計次") 
g2
```

### Wrapper

A better strategy is to define `style$scale_y_continuous` as a function that wraps around the original `scale_y_continuous`. We can make `style$theme` a flexible wrapper too.

```{r}
Style2 <- function(){
  
  # theme
  style$theme = function(...) theme(..., axis.line.y=element_blank(),...)
  
  # the scale part
  style$scale_y_continuous = function(...) scale_y_continuous(expand=c(0,0),...)
  
}
```

### Usage

```{r}
style = martinStyle::Style2()

g + style$scale_y_continuous(name="計次") + style$theme()
```

## Data Range

![Data Range](https://www.economist.com/img/b/834/487/90/sites/default/files/20190112_WOC124.png)

```{r}
df = data.frame(
  year=1979:2018,
  y=1
)
g2 <- ggplot(data=df) + geom_blank(aes(x=year, y=y))
g2 
```

```{r}
g2 |> ggplot_build() -> .g2
.g2$data[[1]]$x |> range() -> xrange
xSeq = xrange[[1]]:xrange[[2]]
xSeq |> subset(xSeq %% 5 ==0) -> xSeqMod5
breaks <- c(xrange, xSeqMod5) |> sort()
breaks
labels = breaks
if(breaks[[2]]-breaks[[1]]==1) labels[[2]]=""
if(breaks[[length(breaks)]]-breaks[[length(breaks)-1]]==1) labels[[length(labels)-1]]=""
g2 + scale_x_continuous(breaks=breaks, labels = labels)
```

```{r}
style$scale_x_continuouse = function(.range=NULL, ...){
  assertthat::assert_that(
    !is.null(.range),
    msg="Require first input .range, a numeric vector of length 2, as x range"
  )
  if(is.null(.range)){
    
  }
}
```
